@page "/dossiers"
@using MiniERP.BlazorApp.Models
@using MiniERP.BlazorApp.Services
@inject IDossierApiClient DossierApiClient
@inject NavigationManager Navigation

<PageTitle>Gestion des Dossiers</PageTitle>

<h1>Gestion des Dossiers d'Huissier</h1>

<div class="row mb-3">
    <div class="col-md-6">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Rechercher..." 
                   @bind="searchTerm" @onkeypress="OnKeyPress" />
            <button class="btn btn-outline-secondary" type="button" @onclick="Search">
                <i class="fas fa-search"></i> Rechercher
            </button>
        </div>
    </div>
    <div class="col-md-3">
        <select class="form-select" @bind="filtreStatut" @bind:after="LoadDossiers">
            <option value="">Tous les statuts</option>
            @foreach (var statut in Enum.GetValues<StatutDossier>())
            {
                <option value="@((int)statut)">@GetStatutText(statut)</option>
            }
        </select>
    </div>
    <div class="col-md-3">
        <button class="btn btn-primary" @onclick="NavigateToCreate">
            <i class="fas fa-plus"></i> Nouveau Dossier
        </button>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Chargement...</span>
        </div>
    </div>
}
else if (dossiers == null || !dossiers.Any())
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> Aucun dossier trouvé.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Débiteur</th>
                    <th>Montant</th>
                    <th>Date Audience</th>
                    <th>Statut</th>
                    <th>Date Création</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var dossier in dossiers)
                {
                    <tr class="@GetRowClass(dossier.Statut)">
                        <td>@dossier.Id</td>
                        <td>@dossier.NomDebiteur</td>
                        <td class="text-end">@dossier.Montant.ToString("C")</td>
                        <td>@dossier.DateAudience.ToString("dd/MM/yyyy")</td>
                        <td>
                            <span class="badge @GetStatusBadgeClass(dossier.Statut)">
                                @GetStatutText(dossier.Statut)
                            </span>
                        </td>
                        <td>@dossier.DateCreation.ToString("dd/MM/yyyy")</td>
                        <td>
                            <div class="btn-group btn-group-sm" role="group">
                                <button class="btn btn-outline-primary" @onclick="() => NavigateToEdit(dossier.Id)" title="Modifier">
                                    <i class="fas fa-edit"></i>
                                </button>
                                @if (dossier.Statut != StatutDossier.Cloture)
                                {
                                    <button class="btn btn-outline-success" @onclick="() => CloturerDossier(dossier.Id)" title="Clôturer">
                                        <i class="fas fa-check"></i>
                                    </button>
                                }
                                <button class="btn btn-outline-danger" @onclick="() => ConfirmerSuppression(dossier)" title="Supprimer">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="mt-3">
        <small class="text-muted">
            @dossiers.Count dossier(s) affiché(s)
        </small>
    </div>
}

@code {
    private List<DossierDto>? dossiers;
    private string searchTerm = "";
    private string filtreStatut = "";
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDossiers();
    }

    private async Task LoadDossiers()
    {
        isLoading = true;
        try
        {
            // Chargement via API - Clean Architecture
            var allDossiers = await DossierApiClient.GetAllAsync();
            dossiers = allDossiers;
        }
        catch (Exception ex)
        {
            // TODO: Gérer l'erreur (toast notification)
            Console.WriteLine($"Erreur lors du chargement des dossiers: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Search()
    {
        await LoadDossiers();
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }


    private async Task CloturerDossier(int dossierId)
    {
        try
        {
            await DossierApiClient.CloturerAsync(dossierId);
            await LoadDossiers(); // Recharger la liste
        }
        catch (Exception ex)
        {
            // TODO: Afficher message d'erreur
            Console.WriteLine($"Erreur lors de la clôture: {ex.Message}");
        }
    }

    private async Task ConfirmerSuppression(DossierDto dossier)
    {
        // Pour le moment, suppression directe (à améliorer avec une modal de confirmation)
        try
        {
            await DossierApiClient.DeleteAsync(dossier.Id);
            await LoadDossiers();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la suppression: {ex.Message}");
        }
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/dossiers/create");
    }

    private void NavigateToEdit(int id)
    {
        Navigation.NavigateTo($"/dossiers/edit/{id}");
    }

    private string GetStatutText(StatutDossier statut)
    {
        return statut switch
        {
            StatutDossier.Ouvert => "Ouvert",
            StatutDossier.EnCours => "En Cours",
            StatutDossier.Suspendu => "Suspendu",
            StatutDossier.Cloture => "Clôturé",
            StatutDossier.Annule => "Annulé",
            _ => "Inconnu"
        };
    }

    private string GetStatusBadgeClass(StatutDossier statut)
    {
        return statut switch
        {
            StatutDossier.Ouvert => "bg-primary",
            StatutDossier.EnCours => "bg-warning",
            StatutDossier.Suspendu => "bg-secondary",
            StatutDossier.Cloture => "bg-success",
            StatutDossier.Annule => "bg-danger",
            _ => "bg-light"
        };
    }

    private string GetRowClass(StatutDossier statut)
    {
        return statut switch
        {
            StatutDossier.Cloture => "table-success",
            StatutDossier.Annule => "table-danger",
            StatutDossier.Suspendu => "table-secondary",
            _ => ""
        };
    }
}

<style>
    .table-responsive {
        border-radius: 0.375rem;
        border: 1px solid #dee2e6;
    }

    .btn-group-sm > .btn {
        padding: 0.25rem 0.5rem;
    }

    .badge {
        font-size: 0.75em;
    }
</style>